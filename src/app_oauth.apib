FORMAT: 1A
HOST: https://api.kangaroorewards.com

# Kangaroo Rewards - User API Reference

>**Note.**
If you are looking for Business API Reference, it is awailable at [Business API Reference](https://api.kangaroorewards.com/docs/business)

Developers can build an app using Kangaroo Rewards API in their language of choice. To simplify integrations, Kangaroo Rewards provides REST Server SDKs and samples available on Github (in PHP).

[KangarooRewards-PHP-SDK](https://github.com/kangaroorewards/KangarooRewards-PHP-SDK) - the SDK without Oauth2 support (you will need to handle authentication and request an access token using another [library](https://github.com/kangaroorewards/oauth2-kangaroo-rewards), or by making API calls directly to the authentication endpoints)

[OAuth2 Kangaroo Rewards](https://github.com/kangaroorewards/oauth2-kangaroo-rewards) - the OAuth2 Client for Kangaroo Rewards API

## Build Your First App Following These Steps

- Step 1: Register an app with Kangaroo Rewards
- Step 2: Implement Authentication
- Step 3: Access Kangaroo Rewards REST API

>**Prerequisite.**
To get started, you will need a Kangaroo Rewards Developer account with which to build and test your app.
Sign up for free at: api.kangaroorewards.com/developers

### App capabilities

Your app can do these things and more.

- Access user account information
- Update user profile
- Access Business information including branches, offers, rewards etc.
- Redeem allowed rewards

### Register an app with Kangaroo Rewards

Go to [Developer Portal](https://api.kangaroorewards.com/developers/applications "Developer Portal"). 
Click on the “Register a new Application” button. Consider using a service account when registering your app at 
[Developer Portal](https://api.kangaroorewards.com/developers/applications "Developer Portal"). i.e. “apps@yourcompany.com” - 
This will ensure your app continues to work if you or the app creator leaves the company.

|Register a New App - Fields|Description|
|-----|-----------|
|Application name|The app name which will appear on Authorization dialog.|
|Grant Type|Select `Password Grant` - the only currently supported|
|Authorization callback URL|This must be the page url where the users will be redirected after authorizing your application. Also, The Access Token will be sent to this page|
|Application description|Optional. This is what the users will see on Authentication page|

<img src="https://api.kangaroorewards.com/img/user-app1.png" title="Register your app" style="width: 100%;">

>**Note:** Currently the only supported grant type is Password Grant. Select Password Grant type.

Once the application is created, it will have a Client ID and Client Secret associated to it. The Client ID is public, but Client Secret must not be shared.

### Implement Authentication

OAuth 2 is an open standard for authorization that enables third-party applications to obtain limited access to Kangaroo Rewards user accounts, by delegating user authentication to Kangaroo Rewards.

All developers need to register their application before getting started. A registered OAuth application is assigned a unique Client ID and Client Secret. The Client Secret should not be shared.

#### OAuth - Password Credentials Grant

The Kangaroo Rewards OAuth API supports the Password Credentials Grant flow, where the resource owner has a trust relationship with the client.

This grant type is suitable for clients capable of obtaining the resource owner’s credentials (username and password, typically using an interactive form).

The application may access a Kangaroo Rewards API after it receives the access token.

>**Note:** Your application should always use HTTPS in this scenario.

**1. Requesting Tokens**

Access Token Request Endpoint:
```
https://api.kangaroorewards.com/oauth/token
```

Once you have created an application with type `password grant`, you may request an access token by issuing a POST request to 
the /oauth/token route with the user's email address and pin code. If the request is successful, you will receive an access_token 
and refresh_token in the JSON response from the server.

<table class="table">
    <tr class="bg-primary">
        <th>Parameter</th> <th>Values</th> <th>Description</th>
    </tr>
    <tr>
        <td><strong>client_id</strong></td>
        <td>The client ID you obtain from the <a href="/developers">Developer Portal</a> when you registered your app</td>
        <td>
            Identifies the client that is making the request. 
            The value passed in this parameter must exactly match the value shown in the <a href="/developers">Developer Portal</a>
        </td>
    </tr>
    <tr>
        <td><strong>client_secret</strong></td>
        <td>The client secret you obtain from the <a href="/developers">Developer Portal</a> when you registered your app</td>
        <td>
            Identifies the client that is making the request. 
            The value passed in this parameter must exactly match the value shown in the <a href="/developers">Developer Portal</a>
        </td>
    </tr>
    <tr>
        <td><strong>grant_type</strong></td>
        <td><strong>password</strong></td>
        <td>
            For password grant
        </td>
    </tr>
    <tr>
        <td><strong>username</strong></td>
        <td>Email or phone number</td>
        <td>
           The email or phone number
        </td>
    </tr>
    <tr>
        <td><strong>password</strong></td>
        <td>The pin code</td>
        <td>
           The user's pin code
        </td>
    </tr>
    <tr>
        <td><strong>scope</strong></td>
        <td>* or `user`</td>
        <td>
            Scopes allow the clients to request a specific set of permissions when requesting authorization to access an account
        </td>
    </tr>
    <tr>
        <td><strong>application_key</strong></td>
        <td>The Application Key</td>
        <td>
            The business owner has to provide The Application Key. He can get it from his business portal.
        </td>
    </tr>
</table>

Example Token Request

```
$http = new GuzzleHttp\Client;

$response = $http->post('https://api.kangaroorewards.com/oauth/token', [
    'form_params' => [
        'grant_type' => 'password',
        'client_id' => '{YOUR_CLIENT_ID}',
        'client_secret' => '{YOUR_CLIENT_SECRET}',
        'username' => 'john@example.com',
        'password' => 'john-super-password',
        'application_key' => '{YOUR_APPLICATION_KEY}',
        'scope' => '*',
    ],
]);

$token = json_decode((string) $response->getBody(), true);

print_r($token);
```

A successful response is returned as a JSON array, similar to the following:

```
{
    "access_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImI5ZTk0NTRkYTRmOTY5Y2U2ZTUxMmFlMTRkZTdkMWJhZWQ1NjUyZTcwNmNiOTk2YTE2MjdhMjg0ZDMzMTM2NDNlZmJlZjhiZWU4YWQxMDg4In0",
    "refresh_token":"2riNuUlbhlW1MWKb4Jos9FOYgIzz5ZJtK7rQjIgLDu3XsgblD5Xtn44sFieo",
    "expires_in":3920,
    "token_type":"Bearer"
}
```
            
**2. Use Access Token**

Now you may use the access token to make requests, on behalf of the user, from the resource server via the API (endpoint: https://api.kangaroorewards.com/users).

The access token may be used until it expires (15 days after being issued) or is otherwise invalidated (e.g. user revoked or refresh token used).

Example Access Token Use
```
curl -H "Authorization: Bearer 12345678900987654321-abc34135acde13f13530" https://api.kangaroorewards.com/users/me
```

#### Refresh Token Flow
If you would like to request a new access token (and new refresh token), you may do so by sending the authorization server a token refresh request. A typical reason for refreshing a token is that the original access token has expired. A refresh token may only be used once, and using it invalidates the access token that it was issued with.

**1. Use Refresh Token**

Use the refresh_token in your token refresh request, which is a POST request to the token endpoint with the appropriate parameters.

```
https://api.kangaroorewards.com/oauth/token
```

<table class="table">
    <tr class="bg-primary">
        <th>Parameter</th> <th>Values</th> <th>Description</th>
    </tr>
    <tr>
        <td><strong>grant_type</strong></td>
        <td><strong>refresh_token</strong></td>
        <td>
            Must be set to "refresh_token" for an token refresh request.
        </td>
    </tr>
    <tr>
        <td><strong>refresh_token</strong></td>
        <td>Refresh token string</td>
        <td>The <strong>refresh_token</strong> that was received with the original access token.</td>
    </tr>
</table>

**Token Refresh Response**

The refresh token response looks just like the normal access token grant. It includes new access and refresh tokens.

Example Refresh Token Request
```
curl -X POST "https://api.kangaroorewards.com/oauth/token?grant_type=refresh_token&refresh_token=gbnv934s8rufe9j9e8jd98h392fw"
```

**Scopes**

Scopes limit the type of access that an access token will allow. The Kangaroo Rewards API currently supports one scope, "admin".
<table class="table">
    <tr class="bg-primary">
        <th>Name</th> <th>Description</th>
    </tr>
    <tr>
        <td><strong>*</strong></td>
        <td> To authorize the token for all of the scopes currently supported </td>
    </tr>
</table>

